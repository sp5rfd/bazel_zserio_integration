/**
 * Automatically generated by Zserio C++ extension version 2.7.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <data/Vector.h>

namespace data
{

Vector::Vector(const allocator_type& allocator) noexcept :
        m_x_(allocator),
        m_y_(allocator),
        m_z_(allocator)
{
}

Vector::Vector(::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_x_(readX(in, allocator)),
        m_y_(readY(in, allocator)),
        m_z_(readZ(in, allocator))
{
}

Vector::Vector(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in, const allocator_type& allocator) :
        m_x_(readX(contextNode, in, allocator)),
        m_y_(readY(contextNode, in, allocator)),
        m_z_(readZ(contextNode, in, allocator))
{
}

Vector::Vector(::zserio::PropagateAllocatorT,
        const Vector& other, const allocator_type& allocator) :
        m_x_(::zserio::allocatorPropagatingCopy(other.m_x_, allocator)),
        m_y_(::zserio::allocatorPropagatingCopy(other.m_y_, allocator)),
        m_z_(::zserio::allocatorPropagatingCopy(other.m_z_, allocator))
{
}

::base::Point& Vector::getX()
{
    return m_x_;
}

const ::base::Point& Vector::getX() const
{
    return m_x_;
}

void Vector::setX(const ::base::Point& x_)
{
    m_x_ = x_;
}

void Vector::setX(::base::Point&& x_)
{
    m_x_ = ::std::move(x_);
}

::base::Point& Vector::getY()
{
    return m_y_;
}

const ::base::Point& Vector::getY() const
{
    return m_y_;
}

void Vector::setY(const ::base::Point& y_)
{
    m_y_ = y_;
}

void Vector::setY(::base::Point&& y_)
{
    m_y_ = ::std::move(y_);
}

::base::Point& Vector::getZ()
{
    return m_z_;
}

const ::base::Point& Vector::getZ() const
{
    return m_z_;
}

void Vector::setZ(const ::base::Point& z_)
{
    m_z_ = z_;
}

void Vector::setZ(::base::Point&& z_)
{
    m_z_ = ::std::move(z_);
}

void Vector::createPackingContext(::zserio::PackingContextNode& contextNode)
{
    ::base::Point::createPackingContext(contextNode.createChild());
    ::base::Point::createPackingContext(contextNode.createChild());
    ::base::Point::createPackingContext(contextNode.createChild());
}

void Vector::initPackingContext(::zserio::PackingContextNode& contextNode) const
{
    m_x_.initPackingContext(contextNode.getChildren().at(0));
    m_y_.initPackingContext(contextNode.getChildren().at(1));
    m_z_.initPackingContext(contextNode.getChildren().at(2));
}

size_t Vector::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_x_.bitSizeOf(endBitPosition);
    endBitPosition += m_y_.bitSizeOf(endBitPosition);
    endBitPosition += m_z_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Vector::bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += m_x_.bitSizeOf(
            contextNode.getChildren().at(0), endBitPosition);
    endBitPosition += m_y_.bitSizeOf(
            contextNode.getChildren().at(1), endBitPosition);
    endBitPosition += m_z_.bitSizeOf(
            contextNode.getChildren().at(2), endBitPosition);

    return endBitPosition - bitPosition;
}

size_t Vector::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_x_.initializeOffsets(endBitPosition);
    endBitPosition = m_y_.initializeOffsets(endBitPosition);
    endBitPosition = m_z_.initializeOffsets(endBitPosition);

    return endBitPosition;
}

size_t Vector::initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition = m_x_.initializeOffsets(
            contextNode.getChildren().at(0), endBitPosition);
    endBitPosition = m_y_.initializeOffsets(
            contextNode.getChildren().at(1), endBitPosition);
    endBitPosition = m_z_.initializeOffsets(
            contextNode.getChildren().at(2), endBitPosition);

    return endBitPosition;
}

bool Vector::operator==(const Vector& other) const
{
    if (this != &other)
    {
        return
                (m_x_ == other.m_x_) &&
                (m_y_ == other.m_y_) &&
                (m_z_ == other.m_z_);
    }

    return true;
}

uint32_t Vector::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_x_);
    result = ::zserio::calcHashCode(result, m_y_);
    result = ::zserio::calcHashCode(result, m_z_);

    return result;
}

void Vector::write(::zserio::BitStreamWriter& out) const
{
    m_x_.write(out);
    m_y_.write(out);
    m_z_.write(out);
}

void Vector::write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const
{
    m_x_.write(contextNode.getChildren().at(0), out);
    m_y_.write(contextNode.getChildren().at(1), out);
    m_z_.write(contextNode.getChildren().at(2), out);
}

::base::Point Vector::readX(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::base::Point(in, allocator);
}

::base::Point Vector::readX(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::base::Point(contextNode.getChildren().at(0), in, allocator);
}

::base::Point Vector::readY(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::base::Point(in, allocator);
}

::base::Point Vector::readY(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::base::Point(contextNode.getChildren().at(1), in, allocator);
}

::base::Point Vector::readZ(::zserio::BitStreamReader& in,
        const allocator_type& allocator)
{
    return ::base::Point(in, allocator);
}

::base::Point Vector::readZ(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamReader& in, const allocator_type& allocator)
{
    return ::base::Point(contextNode.getChildren().at(2), in, allocator);
}

} // namespace data
