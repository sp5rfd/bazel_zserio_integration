/**
 * Automatically generated by Zserio C++ extension version 2.7.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef DATA_VECTOR_H
#define DATA_VECTOR_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/ArrayTraits.h>

#include <base/Point.h>

namespace data
{

class Vector
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit Vector(const allocator_type& allocator = allocator_type()) noexcept;

    template <typename ZSERIO_T_x,
            typename ZSERIO_T_y,
            typename ZSERIO_T_z,
            ::zserio::is_field_constructor_enabled_t<ZSERIO_T_x, Vector, allocator_type> = 0>
    Vector(
            ZSERIO_T_x&& x_,
            ZSERIO_T_y&& y_,
            ZSERIO_T_z&& z_,
            const allocator_type& allocator = allocator_type()) :
            Vector(allocator)
    {
        m_x_ = ::std::forward<ZSERIO_T_x>(x_);
        m_y_ = ::std::forward<ZSERIO_T_y>(y_);
        m_z_ = ::std::forward<ZSERIO_T_z>(z_);
    }

    explicit Vector(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Vector(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Vector() = default;

    Vector(const Vector&) = default;
    Vector& operator=(const Vector&) = default;

    Vector(Vector&&) = default;
    Vector& operator=(Vector&&) = default;

    Vector(::zserio::PropagateAllocatorT,
            const Vector& other, const allocator_type& allocator);

    ::base::Point& getX();
    const ::base::Point& getX() const;
    void setX(const ::base::Point& x_);
    void setX(::base::Point&& x_);

    ::base::Point& getY();
    const ::base::Point& getY() const;
    void setY(const ::base::Point& y_);
    void setY(::base::Point&& y_);

    ::base::Point& getZ();
    const ::base::Point& getZ() const;
    void setZ(const ::base::Point& z_);
    void setZ(::base::Point&& z_);

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const Vector& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    ::base::Point readX(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::base::Point readX(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::base::Point readY(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::base::Point readY(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);
    ::base::Point readZ(::zserio::BitStreamReader& in,
            const allocator_type& allocator);
    ::base::Point readZ(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator);

    ::base::Point m_x_;
    ::base::Point m_y_;
    ::base::Point m_z_;
};

} // namespace data

#endif // DATA_VECTOR_H
