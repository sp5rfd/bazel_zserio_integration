/**
 * Automatically generated by Zserio C++ extension version 2.7.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#ifndef BASE_POINT_H
#define BASE_POINT_H

#include <zserio/Traits.h>
#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/AllocatorPropagatingCopy.h>
#include <memory>
#include <zserio/PackingContext.h>
#include <zserio/ArrayTraits.h>

namespace base
{

class Point
{
public:
    using allocator_type = ::std::allocator<uint8_t>;

    explicit Point(const allocator_type& allocator = allocator_type()) noexcept;

    explicit Point(
            float value_,
            const allocator_type& allocator = allocator_type()) :
            Point(allocator)
    {
        m_value_ = value_;
    }

    explicit Point(::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());
    explicit Point(::zserio::PackingContextNode& contextNode,
            ::zserio::BitStreamReader& in, const allocator_type& allocator = allocator_type());

    ~Point() = default;

    Point(const Point&) = default;
    Point& operator=(const Point&) = default;

    Point(Point&&) = default;
    Point& operator=(Point&&) = default;

    Point(::zserio::PropagateAllocatorT,
            const Point& other, const allocator_type& allocator);

    float getValue() const;
    void setValue(float value_);

    static void createPackingContext(::zserio::PackingContextNode& contextNode);
    void initPackingContext(::zserio::PackingContextNode& contextNode) const;

    size_t bitSizeOf(size_t bitPosition = 0) const;
    size_t bitSizeOf(::zserio::PackingContextNode& contextNode, size_t bitPosition) const;

    size_t initializeOffsets(size_t bitPosition = 0);
    size_t initializeOffsets(::zserio::PackingContextNode& contextNode, size_t bitPosition);

    bool operator==(const Point& other) const;
    uint32_t hashCode() const;

    void write(::zserio::BitStreamWriter& out) const;
    void write(::zserio::PackingContextNode& contextNode, ::zserio::BitStreamWriter& out) const;

private:
    float readValue(::zserio::BitStreamReader& in);

    float m_value_;
};

} // namespace base

#endif // BASE_POINT_H
