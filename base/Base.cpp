/**
 * Automatically generated by Zserio C++ extension version 2.7.0.
 * Generator setup: writerCode, pubsubCode, serviceCode, sqlCode, sourcesAmalgamation, stdAllocator.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <base/Point.h>

namespace base
{

Point::Point(const allocator_type&) noexcept :
        m_value_(float())
{
}

Point::Point(::zserio::BitStreamReader& in, const allocator_type&) :
        m_value_(readValue(in))
{
}

Point::Point(::zserio::PackingContextNode&, ::zserio::BitStreamReader& in, const allocator_type&) :
        m_value_(readValue(in))
{
}

Point::Point(::zserio::PropagateAllocatorT,
        const Point& other, const allocator_type& allocator) :
        m_value_(::zserio::allocatorPropagatingCopy(other.m_value_, allocator))
{
}

float Point::getValue() const
{
    return m_value_;
}

void Point::setValue(float value_)
{
    m_value_ = value_;
}

void Point::createPackingContext(::zserio::PackingContextNode& contextNode)
{
    contextNode.createChild();
}

void Point::initPackingContext(::zserio::PackingContextNode&) const
{
}

size_t Point::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t Point::bitSizeOf(::zserio::PackingContextNode&, size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition - bitPosition;
}

size_t Point::initializeOffsets(size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

size_t Point::initializeOffsets(::zserio::PackingContextNode&, size_t bitPosition)
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(32);

    return endBitPosition;
}

bool Point::operator==(const Point& other) const
{
    if (this != &other)
    {
        return
                (m_value_ == other.m_value_);
    }

    return true;
}

uint32_t Point::hashCode() const
{
    uint32_t result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_value_);

    return result;
}

void Point::write(::zserio::BitStreamWriter& out) const
{
    out.writeFloat32(m_value_);
}

void Point::write(::zserio::PackingContextNode&, ::zserio::BitStreamWriter& out) const
{
    out.writeFloat32(m_value_);
}

float Point::readValue(::zserio::BitStreamReader& in)
{
    return static_cast<float>(in.readFloat32());
}

} // namespace base
