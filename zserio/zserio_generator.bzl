def output_directory():
    return "generated"

def input_files():
    # list of all template files for zSerio
    return [
        "base.zs",
        "data.zs"
    ]

def expected_outputs():
    # list of all expected output files generated by zSerio
    output_files = [
        "base/Base.cpp",
        "base/Point.h",
        "data/Data.cpp",
        "data/Vector.h"
    ]
    converted_outputs = []
    for file in output_files:
        converted_outputs.append(
            "{}/{}".format(
                output_directory(),
                file
            )
        )
    return converted_outputs

def _impl(ctx):
    java = ctx.attr._jdk[java_common.JavaRuntimeInfo]

    # inputs
    zserio_jar = ctx.file._zserio_jar
    ins = [ 
        zserio_jar,
    ] + ctx.files._jdk + ctx.files.input_files

    # other params
    src_dir = ctx.files.input_files[0]

    # outputs
    cpp_dir = ctx.actions.declare_directory(output_directory())
    outs = [
        cpp_dir,
    ] + ctx.outputs.output_files

    ctx.actions.run_shell(
        inputs = ins,
        outputs = outs,
        command = """
            for zs_file in {zs_files} 
            do
                {java} -jar {zserio} -cpp {cpp_dir} -src {src_dir} $zs_file 
            done
        """.format(
            java = java.java_executable_exec_path,
            zserio = zserio_jar.path,
            cpp_dir = cpp_dir.path,
            src_dir = src_dir.dirname,
            zs_files = ' '.join([file.basename for file in ctx.files.input_files])
        )
    )

    return [
        DefaultInfo(files = depset(outs)),
        CcInfo()
    ]

zserio_codegen = rule(
    implementation = _impl,
    attrs = {
        "_jdk": attr.label(
            default = Label("@bazel_tools//tools/jdk:current_host_java_runtime"),
            providers = [java_common.JavaRuntimeInfo],
        ),
        "_zserio_jar": attr.label(
            default = Label("@zserio_bin"),
            allow_single_file = True
        ),
        "input_files": attr.label_list(
            default = input_files(),
            allow_files = True
        ),
        "output_files": attr.output_list(),
    }
)

def create_model(name):
    # generate zSerio code
    zserio_codegen(
        name = name + "_",
        output_files = expected_outputs(),
        visibility = ["//visibility:public"],
    )

    # compile library out of generated code
    native.cc_library(
        name = name,
        srcs = expected_outputs(),
        includes = [
            output_directory()
        ],
        deps = [
            "@zserio_runtime"
        ],
        visibility = ["//visibility:public"],
    )
    